version = 1

[install]
python3.pkg-path = "python3"
python3.version = ">=3.12"
poetry.pkg-path = "poetry"

[hook]
on-activate = """
  # Autogenerated by Flox

  # Setup a Python virtual environment

  if [ -z "${FLOX_ENV_CACHE:-}" ]; then
    export POETRY_VIRTUALENVS_PATH="$out"
  else
    export POETRY_VIRTUALENVS_PATH="$FLOX_ENV_CACHE/poetry/virtualenvs"
  fi

  if [ -z "$(poetry env info --path)" ]; then
    echo "Creating poetry virtual environment in $POETRY_VIRTUALENVS_PATH"
    poetry lock --quiet
  fi

  # Quietly activate venv and install packages in a subshell so
  # that the venv can be freshly activated in the profile section.
  (
    eval "$(poetry env activate)"
    poetry install --quiet
  )

  # End autogenerated by Flox
"""

[profile]
bash = """
  # Autogenerated by Flox

  echo "Activating poetry virtual environment" >&2
  eval "$(poetry env activate)"

  # End autogenerated by Flox
"""
fish = """
  # Autogenerated by Flox

  echo "Activating poetry virtual environment" >&2
  eval (poetry env activate)

  # End autogenerated by Flox
"""
tcsh = """
  # Autogenerated by Flox

  echo "Activating poetry virtual environment" >&2
  eval "`poetry env activate`"

  # End autogenerated by Flox
"""
zsh = """
  # Autogenerated by Flox

  echo "Activating poetry virtual environment" >&2
  eval "$(poetry env activate)"

  # End autogenerated by Flox
"""

[build.quotes-app-python]
description = "A simple Python app that prints a random quote from a list of quotes."
version = "0.0.1"
command = """
  mkdir $out

  # Prevent install being a noop when run from an existing activation that
  # already has the virtualenv and dependencies installed.
  unset VIRTUAL_ENV
  export POETRY_VIRTUALENVS_PATH=$out
  export POETRY_VIRTUALENVS_IN_PROJECT=false

  # Install dependencies to the virtualenv.
  poetry install --no-root

  # Build and install our project to the virtualenv.
  poetry build --format wheel
  poetry run pip install dist/quotes_app_python-*.whl

  # Copy the binstub from the virtualenv to be wrapped by Flox.
  venv_path="$(poetry env info --path)"
  mkdir -p "${out}/bin"
  cp "${venv_path}/bin/quotes-app-python" "${out}/bin/quotes-app-python"
"""
runtime-packages = [
  "python3",
]

[build.quotes-app-python-deps]
description = "Vendored dependencies for the quotes server"
version = "0.0.1"
command = """
  mkdir $out

  # Prevent install being a noop when run from an existing activation that
  # already has the virtualenv and dependencies installed.
  unset VIRTUAL_ENV
  export POETRY_VIRTUALENVS_PATH=$out
  export POETRY_VIRTUALENVS_IN_PROJECT=false

  # Install dependencies and cache them in the build output.
  export POETRY_CACHE_DIR=$out
  poetry install --no-root

  # Poetry doesn't have a way to populate the cache without installing the
  # dependencies so we just delete the virtualenv after.
  venv_path="$(poetry env info --path)"
  rm -rf "$venv_path"
"""

[build.quotes-app-python-pure]
description = "A simple Python app that prints a random quote from a list of quotes."
version = "0.0.1"
command = """
  mkdir $out

  # Create an isolated virtualenv with the correct `python` and `site-packages`
  # from this build.
  export POETRY_VIRTUALENVS_PATH=$out
  export POETRY_VIRTUALENVS_IN_PROJECT=false

  # Install cached dependencies from the deps build.
  export POETRY_CACHE_DIR=${quotes-app-python-deps}
  poetry install --no-root

  # Build and install our project to the virtualenv.
  poetry build --format wheel
  poetry run pip install dist/quotes_app_python-*.whl

  # Copy the binstub from the virtualenv to be wrapped by Flox.
  venv_path="$(poetry env info --path)"
  mkdir -p "${out}/bin"
  cp "${venv_path}/bin/quotes-app-python" "${out}/bin/quotes-app-python-pure"
"""
sandbox = "pure"
runtime-packages = [
  "python3",
]
