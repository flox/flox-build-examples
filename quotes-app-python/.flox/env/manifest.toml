version = 1

[install]
python3.pkg-path = "python3"
python3.version = ">=3.12"
poetry.pkg-path = "poetry"

[hook]
on-activate = """
  # Autogenerated by Flox

  # Setup a Python virtual environment

  export POETRY_VIRTUALENVS_PATH="$FLOX_ENV_CACHE/poetry/virtualenvs"

  if [ -z "$(poetry env info --path)" ]; then
    echo "Creating poetry virtual environment in $POETRY_VIRTUALENVS_PATH"
    poetry lock --quiet
  fi

  # Quietly activate venv and install packages in a subshell so
  # that the venv can be freshly activated in the profile section.
  (
    eval "$(poetry env activate)"
    poetry install --quiet
  )

  # End autogenerated by Flox
"""

[profile]
bash = """
  # Autogenerated by Flox

  echo "Activating poetry virtual environment" >&2
  eval "$(poetry env activate)"

  # End autogenerated by Flox
"""
fish = """
  # Autogenerated by Flox

  echo "Activating poetry virtual environment" >&2
  eval (poetry env activate)

  # End autogenerated by Flox
"""
tcsh = """
  # Autogenerated by Flox

  echo "Activating poetry virtual environment" >&2
  eval "`poetry env activate`"

  # End autogenerated by Flox
"""
zsh = """
  # Autogenerated by Flox

  echo "Activating poetry virtual environment" >&2
  eval "$(poetry env activate)"

  # End autogenerated by Flox
"""

[build.quotes-app-python]
description = "A simple Python app that prints a random quote from a list of quotes."
version = "0.0.1"
command = """
  # Install to a new virtualenv.
  export POETRY_VIRTUALENVS_PATH=$out
  export POETRY_VIRTUALENVS_IN_PROJECT=false
  export POETRY_VIRTUALENVS_OPTIONS_NO_PIP=true
  poetry install

  # Symlink any executables from the virtualenv.
  mkdir -p "${out}/bin"
  cd $out/bin
  ln -s ../*/bin/quotes-app-python .
"""
runtime-packages = [
  "python3",
]
