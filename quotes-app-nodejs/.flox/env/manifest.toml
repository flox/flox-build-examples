version = 1

[install]
nodejs.pkg-path = "nodejs"

[hook]
on-activate = """
  # Autogenerated by Flox

  # Install nodejs dependencies
  npm install

  # End autogenerated by Flox
"""

[build.quotes-app-nodejs]
command = """
    mkdir -p $out/{libexec,bin}

    npm ci

    # Build the application (creates `./dist`
    npm run build

    # Install `dist` to $out
    cp -R ./dist $out

    # Copy remaining runtime assets
    cp quotes.json $out/dist

    # # This example uses a bundler to create a self-sufficient `dist`
    # # If your app needs additional node_modules at runtime,
    # # `npm prune` and copy the node mudules to $out
    # npm prune --include "prod"
    # cp -R ./node_modules $out

    cat > $out/bin/quotes-app-nodejs <<EOF
#!/usr/bin/env sh
exec node $out/dist/index.js \\$@
EOF
    chmod 755 $out/bin/quotes-app-nodejs
"""
description = "A quotes app written in nodejs"
version = "0.0.1"

[build.quotes-app-nodejs-deps]
command = '''
    mkdir -p $out
    npm ci
    cp -R node_modules $out
'''

[build.quotes-app-nodejs-pure]
command = """
    mkdir -p $out/{dist,bin}

    # Copy node modules built in the previous step
    cp --no-preserve=mode -R ${quotes-app-nodejs-deps}/node_modules ./

    # Build the application
    npm run build

    # Install `dist` to $out
    cp -R ./dist $out

    # Copy remaining runtime assets
    cp quotes.json $out/dist

    # # This example uses a bundler to create a self-sufficient `dist`
    # # If your app needs additional node_modules at runtime,
    # # `npm prune` and copy the node mudules to $out
    # npm prune --include "prod"
    # cp -R ./node_modules $out

    # Create an executable to start the server
    cat > $out/bin/quotes-app-nodejs-pure <<EOF
#!/usr/bin/env sh
exec node $out/dist/index.js \\$@
EOF
    chmod 755 $out/bin/quotes-app-nodejs-pure
"""
description = "A quotes app written in nodejs"
version = "0.0.1"
sandbox = "pure"

[services]
quotes-nodejs.command = "npm start"
